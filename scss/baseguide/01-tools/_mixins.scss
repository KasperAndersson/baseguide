// list
@mixin list-unstyled {
  padding-left: 0;
  list-style: none;
}

@mixin list-inline($spacing: 1rem, $center: false, $child-selector: 'li') {
  @include list-unstyled;

  display: flex;
  flex-wrap: wrap;
  margin-left: $spacing * -1;

  @if $center {
    justify-content: center;
  }

  > #{$child-selector} {
    margin-left: $spacing;
  }
}


// clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: block;
    clear: both;
  }
}


// text
@mixin text-hide {
  text-indent: 110%;
  white-space: nowrap;
  overflow: hidden;
  color: transparent;
  text-shadow: none;
}

@mixin text-truncate {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

@mixin text-hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
}


// visibility
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
}

@mixin sr-only-focusable {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: inherit;
  }
}


// beautiful underline
@mixin underline($color: currentColor, $distance: 0, $width: 100%, $height: 1px) {
  padding-bottom: $distance;
  background-image: linear-gradient($color, $color);
  background-size: $width $height;
  background-position: 0 100%;
  background-repeat: no-repeat;
  text-decoration: none;
}


// target HiDPI screens
@mixin hidpi($ratio: 1.5) {
  @media (min-resolution: round($ratio * 96dpi)), (min-resolution: $ratio * 1dppx) {
    @content;
  }
}


// scale headings using modular scale
@mixin scale-headings($scale: $type-scale-base, $headings: $headings) {
  @if (type-of($scale) == 'map') {
    @each $breakpoint, $size in $scale {
      @include mq($breakpoint) {
        @include loop-headings($size);
      }
    }
  }
  @else {
    @include loop-headings($scale);
  }
}


// helper mixin for scale-headings
@mixin loop-headings($size) {
  $max-scale: 0;

  @each $heading in $headings {
    #{$heading} {
      font-size: to-rem(modular-scale($max-scale, $size));
    }

    $max-scale: $max-scale + 1;
  }
}


// triangle mixin adapted from bourbon
@mixin triangle($direction, $width, $height, $color: currentColor) {
  border-style: solid;
  height: 0;
  width: 0;

  @if $direction == 'up' {
    border-color: transparent transparent $color;
    border-width: 0 ($width / 2) $height;
  }
  @else if $direction == 'up-right' {
    border-color: transparent $color transparent transparent;
    border-width: 0 $width $width 0;
  }
  @else if $direction == 'right' {
    border-color: transparent transparent transparent $color;
    border-width: ($height / 2) 0 ($height / 2) $width;
  }
  @else if $direction == 'down-right' {
    border-color: transparent transparent $color;
    border-width: 0 0 $width $width;
  }
  @else if $direction == 'down' {
    border-color: $color transparent transparent;
    border-width: $height ($width / 2) 0;
  }
  @else if $direction == 'down-left' {
    border-color: transparent transparent transparent $color;
    border-width: $width 0 0 $width;
  }
  @else if $direction == 'left' {
    border-color: transparent $color transparent transparent;
    border-width: ($height / 2) $width ($height / 2) 0;
  }
  @else if $direction == 'up-left' {
    border-color: $color transparent transparent;
    border-width: $width $width 0 0;
  }
}


// loop all breakpoints and output content
@mixin loop-breakpoints($breakpoints: $mq-breakpoints, $inclusive: true, $mq: true) {
  $breakpoint-keys: map-keys($breakpoints);

  @for $i from 1 through length($breakpoint-keys) {
    $breakpoint: nth($breakpoint-keys, $i) !global;
    $is-first-breakpoint: $breakpoint == nth($breakpoint-keys, 1) !global;
    $is-last-breakpoint: $breakpoint == nth($breakpoint-keys, length($breakpoint-keys)) !global;

    @if $mq {
      @if $inclusive {
        // first breakpoint
        @if $is-first-breakpoint {
          @content;
        }
        // remaining breakpoints
        @else {
          @include mq($breakpoint, $breakpoints: $breakpoints) {
            @content;
          }
        }
      }
      @else {
        // first breakpoint
        @if $is-first-breakpoint {
          @if length($breakpoint-keys) > 1 {
            @include mq($until: nth($breakpoint-keys, $i + 1), $breakpoints: $breakpoints) {
              @content;
            }
          }
          @else {
            @content;
          }
        }
        // last breakpoint
        @else if $is-last-breakpoint {
          @include mq($breakpoint, $breakpoints: $breakpoints) {
            @content;
          }
        }
        // remaining breakpoints
        @else {
          @include mq($breakpoint, nth($breakpoint-keys, $i + 1), $breakpoints: $breakpoints) {
            @content;
          }
        }
      }
    }
    @else {
      @content;
    }
  }
}


// Usage example:
//
// body {
//   @include fluid-calc('font-size', (1rem, 1.25rem), (min: 400px, max: 960px));
// }
@mixin fluid-calc($prop, $sizes, $breakpoints: $fluid-breakpoints) {
  @if ($prop and type-of($sizes) == 'list') {
    $breakpoints: map-values($breakpoints);
    $min-breakpoint: nth($breakpoints, 1);
    $max-breakpoint: nth($breakpoints, length($breakpoints));
    $min-size: to-rem(nth($sizes, 1));
    $max-size: to-rem(nth($sizes, length($sizes)));

    #{$prop}: $min-size;

    @include mq($min-breakpoint) {
      #{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * (100vw - #{to-rem($min-breakpoint)}) / #{strip-unit(to-rem($max-breakpoint) - to-rem($min-breakpoint))});
    }

    @include mq($max-breakpoint) {
      #{$prop}: $max-size;
    }
  }
}
